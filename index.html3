<html lang="en"><head>
  <meta charset="UTF-8">
  

    <link rel="apple-touch-icon" type="image/png" href="https://cpwebassets.codepen.io/assets/favicon/apple-touch-icon-5ae1a0698dcc2402e9712f7d01ed509a57814f994c660df9f7a952f3060705ee.png">

    <meta name="apple-mobile-web-app-title" content="CodePen">

    <link rel="shortcut icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico">

    <link rel="mask-icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/logo-pin-b4b4269c16397ad2f0f7a01bcdf513a1994f4c94b8af2f191c09eb0d601762b1.svg" color="#111">



  
    <script src="https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-2c7831bb44f98c1391d6a4ffda0e1fd302503391ca806e7fcc7b9b87197aec26.js"></script>


  <title>CodePen - SVG Flower Generator</title>

    <link rel="canonical" href="https://codepen.io/soju22/pen/XGLZLp">
  
  
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
  
<style>
body {
  margin: 0;
  font-family: 'Montserrat', sans-serif;
  font-size: 0.9rem;
  color: #000;
  text-shadow: 1px 1px 1px #fff;
}

#svg {
  position: fixed;
  width: 100%;
  height: 100%;
  cursor: pointer;
  filter: drop-shadow(0 0 4px #000);
}

.flower path {
  stroke-linecap: round;
  stroke-linejoin: round;
}

.layer {
  animation-name: layerAnim1;
  animation-duration: 4s;
  animation-fill-mode: both; 
  transform-box: fill-box;
  transform-origin: center center;
}

.layer path {
  stroke: rgba(0, 0, 0, 0.7);
  stroke-width: 0.75px;
}

a {
  color: #555;
  text-decoration: none;
  border-bottom: 0.25rem solid transparent;
  transition: all 0.4s;
}
a:hover {
  color: #000;
  border-bottom-color: rgba(0, 0, 0, 0.7);
}

header, footer {
  position: absolute;
  width: 100%;
  text-align: center;
}
header h1 {
  font-size: 2em;
  margin: 0.5em 0 0;
}
footer {
  bottom: 0.5em;
}

@-moz-document url-prefix() {
  #svg {
    filter: none;
  }
  .layer {
    filter: drop-shadow(0 0 2px #000);
  }
}

@keyframes layerAnim1 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes layerAnim2 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: scale3d(0.2, 0.2, 0.2); }
  to { opacity: 1; transform: scale3d(1, 1, 1); }
}

@keyframes layerAnim3 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: rotateZ(-270deg); }
  to { opacity: 1; opacity: 1; transform: rotateZ(0deg); }
}

@keyframes layerAnim4 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: rotateZ(360deg) scale3d(0.2, 0.2, 0.2); }
  to { opacity: 1; opacity: 1; transform: rotateZ(0deg) scale3d(1, 1, 1); }
}

@keyframes layerAnim5 {
  from, 20%, 40%, 60%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }

  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }

  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }

  60% {
    transform: scale3d(1.03, 1.03, 1.03);
  }

  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

@keyframes layerAnim6 {
  from, 20%, 40%, 60%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    transform: rotateZ(180deg) scale3d(0.3, 0.3, 0.3);
  }

  20% {
    transform: rotateZ(-25.71deg) scale3d(1.1, 1.1, 1.1);
  }

  40% {
    transform: rotateZ(25.71deg) scale3d(0.9, 0.9, 0.9);
  }

  60% {
    transform: rotateZ(-7.71deg) scale3d(1.03, 1.03, 1.03);
  }

  80% {
    transform: rotateZ(7.71deg) scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    transform: rotateZ(0deg) scale3d(1, 1, 1);
  }
}

@keyframes layerAnim7 {
  from, 20%, 40%, 60%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    transform: rotateZ(-180deg) scale3d(0.3, 0.3, 0.3);
  }

  20% {
    transform: rotateZ(25.71deg) scale3d(1.1, 1.1, 1.1);
  }

  40% {
    transform: rotateZ(-25.71deg) scale3d(0.9, 0.9, 0.9);
  }

  60% {
    transform: rotateZ(7.71deg) scale3d(1.03, 1.03, 1.03);
  }

  80% {
    transform: rotateZ(-7.71deg) scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    transform: rotateZ(0deg) scale3d(1, 1, 1);
  }
}

@keyframes layerAnim8 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: rotate3d(1, 1, 1, 360deg); }
  to { opacity: 1; transform: rotate3d(1, 1, 1, 0deg); }
}

@keyframes layerAnim9 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: rotate3d(1, 1, 1, 360deg) scale3d(0.1, 0.1, 0.1); }
  to { opacity: 1; transform: rotate3d(1, 1, 1, 0deg) scale3d(1, 1, 1); }
}

@keyframes layerAnim10 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: scale3d(2, 2, 2); }
  to { opacity: 1; transform: scale3d(1, 1, 1); }
}

@keyframes layerAnim11 {
  from, to { animation-timing-function: ease-out; }
  from { opacity: 0; transform: rotateZ(-360deg) scale3d(2, 2, 2); }
  to { opacity: 1; transform: rotateZ(0deg) scale3d(1, 1, 1); }
}
</style>

  <script>
  window.console = window.console || function(t) {};
</script>

  
  
</head>

<body translate="no">
  <svg id="svg" viewBox="-681.5 -112 1363 224"></svg>

<header>
  <h1>Random Flower Generator</h1>
  <input type="text" id="nameInput" placeholder="Enter your name">
  <input type="number" id="seedInput" placeholder="Enter seed number">
  <button id="generateBtn">Generate Flower</button>
  <button id="downloadBtn">Download PNG</button>
  <br>
  <a href="https://codepen.io/collection/DPjZxo/" target="_blank">SVG Collection</a>
</header>
<footer>
  <div id="nameDisplay"></div>
</footer>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.0.3/chroma.min.js"></script>
      <script id="rendered-js">
import { useState, useEffect, useRef } from 'react';
import { useAccount, useConnect, useDisconnect } from 'wagmi';
import { InjectedConnector } from 'wagmi/connectors/injected';
import { publicProvider } from 'wagmi/providers/public';
import { configureChains, createConfig, WagmiConfig } from 'wagmi';
import { mainnet } from 'wagmi/chains';
import { createPublicClient, http } from 'viem';

const { chains, publicClient } = configureChains(
  [mainnet],
  [publicProvider()]
);

const config = createConfig({
  autoConnect: true,
  publicClient,
});

export default function Home() {
  return (
    <WagmiConfig config={config}>
      <FlowerGenerator />
    </WagmiConfig>
  );
}

function FlowerGenerator() {
  const svgRef = useRef(null);
  const [name, setName] = useState('');
  const [seed, setSeed] = useState('');
  const { address, isConnected } = useAccount();
  const { connect } = useConnect({
    connector: new InjectedConnector(),
  });
  const { disconnect } = useDisconnect();

  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Initialize your App function here
      App();
    }
  }, []);

  function App() {
    // ... (paste your existing App function here)
    // Make sure to use svgRef.current instead of document.getElementById('svg')
  }

  return (
    <div>
      <header>
        <h1>Random Flower Generator</h1>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter your name"
        />
        <input
          type="number"
          value={seed}
          onChange={(e) => setSeed(e.target.value)}
          placeholder="Enter seed number"
        />
        <button onClick={() => {/* Call your generate function */}}>Generate Flower</button>
        <button onClick={() => {/* Call your download function */}}>Download PNG</button>
        <br />
        {!isConnected ? (
          <button onClick={() => connect()}>Connect Wallet</button>
        ) : (
          <div>
            <span>Connected: {address}</span>
            <button onClick={() => disconnect()}>Disconnect</button>
          </div>
        )}
      </header>
      <svg ref={svgRef} viewBox="-681.5 -112 1363 224"></svg>
      <footer>
        <div id="nameDisplay"></div>
      </footer>
    </div>
  );
}
    </script>

  



</body></html>
